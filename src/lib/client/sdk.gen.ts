// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetDemoHelloFromRustData, GetDemoHelloFromRustResponse, GetUsersData, GetUsersResponse, GetUsersByUserIdData, GetUsersByUserIdResponse, GetAuthUserData, GetAuthUserResponse, PostAuthRegisterData, PostAuthRegisterResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Hello world
 */
export const getDemoHelloFromRust = <ThrowOnError extends boolean = false>(options?: Options<GetDemoHelloFromRustData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDemoHelloFromRustResponse, unknown, ThrowOnError>({
        url: '/demo/hello_from_rust',
        ...options
    });
};

export const getUsers = <ThrowOnError extends boolean = false>(options?: Options<GetUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users',
        ...options
    });
};

export const getUsersByUserId = <ThrowOnError extends boolean = false>(options: Options<GetUsersByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUsersByUserIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{user_id}',
        ...options
    });
};

/**
 * Gets the current user
 */
export const getAuthUser = <ThrowOnError extends boolean = false>(options?: Options<GetAuthUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAuthUserResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/user',
        ...options
    });
};

export const postAuthRegister = <ThrowOnError extends boolean = false>(options: Options<PostAuthRegisterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAuthRegisterResponse, unknown, ThrowOnError>({
        url: '/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json; charset=utf-8',
            ...options?.headers
        }
    });
};